MAIN OBJECTIVE
Model the capture probability and behavior of magnetically targeted drug clusters while considering the effects of Brownian motion.
** Using the models, optimal physical conditions can be found that increase drug cluster capture probability in practice. 


    CONTRIBUTORS
    Alexander Janiak, NJIT Provost Research Program ** 
    John DeSalvo, NJIT EXTREEMS-QED 
    Dr. Shahriar Afkhami, NJIT Department of Mathematical Sciences

    PRELIMINARY CONTRIBUTORS
    Modeling Superparamagnetic Particles in Blood Flow for Applications in Magnetic Drug Targeting
    (https://doi.org/10.3390/fluids2020029)
        Pengtao Yue, VT Department of Mathematics 
        Iris Rukshinm, Princeton Mathematics Department
        Josef Mohrenweiser, NJIT Department of Computer Science

MAIN VARIABLES
x0  : Initial position of the clusters along the x-axis or length of the pipe. Flow is in the +x direction.
y0  : Initial position of the clusters along the y-axis or width of the pipe.
z0  : Initial position of the clusters along the z-axis or width of the pipe.
R   : Radius or half the width of the pipe.
P   : Capture Probability/Ratio of the clusters with regard to a set of physical conditions. Given a simulation 
        of 100 clusters with constant physical conditions, if 50 of the clusters reach the target, 
        than the capture probability is 50%.

OUTLINE 
** Main purpose of code is to explore the relationo ships between physical parameters & capture probability 
within the simulations. It is also to find optimal physical conditions by modeling the relationships.

/research_outline
    # Outlines research project and conclusion in detail 

/brownianparticle2 (Yue, Janiak)
    # Calculates the trajectory of a ferrofluid particle in the magnetic field generated by a dipole m.
    # Brownian motion considered. The scheme is only first order accurate in time.
    # Assumed that the Pipe is centered at x-axis, flow is in x-direction, pulsating. 
    # Stochastic Differential Equation Toolbox required (SDE_Toolbox_1.4.1)

    (Yue)
    /dipoleH
        calculates the magnetic field H of a diple in vacuum
    /dxdt
        returns velocity to be sent to ordinary differential eq solvers
    /fbrownian
        main function 
    /ferro_brownian
        executable for 2017 paper
    /graddipH
        calculates the gradient H of a dipole
    /slipvel 
        calculates the slip velocity of the particle

    (Janiak)
    /msim
        main executable for simulating 2d data
    /msim3d
        main executable for simulating 3d data

/models 
    # Jupyter Notebook models (used mainly for visualizing, testing, & manipulating data)
    /model01
        explores initial position (x0) vs capture probability (P). 
        uses x0vsP01.dat - fixed seed and increments of x0.
        major flaw in data: the random nature of the simulation is not depicted
    /model02 * 
        explores initial position (x0) vs capture probability (P)
        uses x0vsP02.dat - random seed & increments of x0
        poly & ridge regression: end cases are tough to fit into model without overfitting
    /model03
        explores pipe radius (R) vs capture probability (P)
        no longer exists - covered by DeSalvo
    /model04
        explores initial position (z0) vs capture probability (P)
        uses z0vsP01.dat
        parabolic shape - easily modeled by poly/ridge regression
    /model05
        explores initial position (y0) vs capture probability (P)
        uses y0vsP01.dat
        identical to model0

    # Main matlab models --> used to create graphs to illustrate relationships & optimal values
    /graphx0vP
        final graphs and model for the relationship between x0 and P

    /graph3d * 
        explores the relationship between [x0, y0, z0] & P
        fits the gaussianrq function to the simulated data
        maps the regressor onto a greater number of points (within the scope of the inital ranges)
        uses the mapped data to calculate and create an optimal "slice" of the graph 
    /gaussianrq
        autogenerated function for the gaussian regressor with a rational quadratic kernel

    /pspline
        autogenerated function for piece wise polynomial spline regressor 
        missing
    
/models/data   
    # Data generated by through /brownianparticle2 
    /x0vsPO1    
        [x0,P]
        x0 varied between [-0.01,0] in fixed increments
        100 instances
        fixed seed
    /x0vsP02
        [x0,P]
        900 instances
        x0 varied between [-.065, 0.008]
    /RvsP
        [R,P]
        100 instances
    /z0vsP01
        [z0,P]
        100 instances
        z0 varied between [-0.01,0.01]
    /y0vsP01
        [y0,P]
        100 instances
        y0 varied between [-0.01,0.01]
    /xyzvsP01
        [x0,y0,z0,P]
        2000 instances
        cylinder with radius 1e-4 and length 0.05 [-0.04, 0.01]


